// Generated by jextract

package com.github.dsheirer.sdrplay.api.v3_07;

import jdk.incubator.foreign.GroupLayout;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;
public class sdrplay_api_EventParamsT {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("gRdB"),
            Constants$root.C_INT$LAYOUT.withName("lnaGRdB"),
            Constants$root.C_DOUBLE$LAYOUT.withName("currGain")
        ).withName("gainParams"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("powerOverloadChangeType")
        ).withName("powerOverloadParams"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("modeChangeType")
        ).withName("rspDuoModeParams")
    );
    public static MemoryLayout $LAYOUT() {
        return sdrplay_api_EventParamsT.$union$LAYOUT;
    }
    public static MemorySegment gainParams$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment powerOverloadParams$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static MemorySegment rspDuoModeParams$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


