// Generated by jextract

package com.github.dsheirer.sdrplay.api.v3_07;

import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;

public class sdrplay_api_SyncUpdateT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("sampleNum"),
        Constants$root.C_INT$LAYOUT.withName("period")
    );
    public static MemoryLayout $LAYOUT() {
        return sdrplay_api_SyncUpdateT.$struct$LAYOUT;
    }
    static final VarHandle sampleNum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sampleNum"));
    public static VarHandle sampleNum$VH() {
        return sdrplay_api_SyncUpdateT.sampleNum$VH;
    }
    public static int sampleNum$get(MemorySegment seg) {
        return (int)sdrplay_api_SyncUpdateT.sampleNum$VH.get(seg);
    }
    public static void sampleNum$set( MemorySegment seg, int x) {
        sdrplay_api_SyncUpdateT.sampleNum$VH.set(seg, x);
    }
    public static int sampleNum$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_SyncUpdateT.sampleNum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sampleNum$set(MemorySegment seg, long index, int x) {
        sdrplay_api_SyncUpdateT.sampleNum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle period$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("period"));
    public static VarHandle period$VH() {
        return sdrplay_api_SyncUpdateT.period$VH;
    }
    public static int period$get(MemorySegment seg) {
        return (int)sdrplay_api_SyncUpdateT.period$VH.get(seg);
    }
    public static void period$set( MemorySegment seg, int x) {
        sdrplay_api_SyncUpdateT.period$VH.set(seg, x);
    }
    public static int period$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_SyncUpdateT.period$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void period$set(MemorySegment seg, long index, int x) {
        sdrplay_api_SyncUpdateT.period$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


