// Generated by jextract

package io.github.dsheirer.sdrplay.api;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class sdrplay_api_DevParamsT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_DOUBLE.withName("ppm"),
        MemoryLayout.structLayout(
            C_DOUBLE.withName("fsHz"),
            C_CHAR.withName("syncUpdate"),
            C_CHAR.withName("reCal"),
            MemoryLayout.paddingLayout(48)
        ).withName("fsFreq"),
        MemoryLayout.structLayout(
            C_INT.withName("sampleNum"),
            C_INT.withName("period")
        ).withName("syncUpdate"),
        MemoryLayout.structLayout(
            C_CHAR.withName("resetGainUpdate"),
            C_CHAR.withName("resetRfUpdate"),
            C_CHAR.withName("resetFsUpdate")
        ).withName("resetFlags"),
        MemoryLayout.paddingLayout(8),
        C_INT.withName("mode"),
        C_INT.withName("samplesPerPkt"),
        MemoryLayout.structLayout(
            C_CHAR.withName("rfNotchEnable"),
            C_CHAR.withName("rfDabNotchEnable")
        ).withName("rsp1aParams"),
        MemoryLayout.structLayout(
            C_CHAR.withName("extRefOutputEn")
        ).withName("rsp2Params"),
        MemoryLayout.paddingLayout(8),
        MemoryLayout.structLayout(
            C_INT.withName("extRefOutputEn")
        ).withName("rspDuoParams"),
        MemoryLayout.structLayout(
            C_CHAR.withName("hdrEnable"),
            C_CHAR.withName("biasTEnable"),
            MemoryLayout.paddingLayout(16),
            C_INT.withName("antennaSel"),
            C_CHAR.withName("rfNotchEnable"),
            C_CHAR.withName("rfDabNotchEnable"),
            MemoryLayout.paddingLayout(16)
        ).withName("rspDxParams")
    );
    public static MemoryLayout $LAYOUT() {
        return sdrplay_api_DevParamsT.$struct$LAYOUT;
    }
    static final VarHandle ppm$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("ppm"));
    public static VarHandle ppm$VH() {
        return sdrplay_api_DevParamsT.ppm$VH;
    }
    public static double ppm$get(MemorySegment seg) {
        return (double)sdrplay_api_DevParamsT.ppm$VH.get(seg);
    }
    public static void ppm$set( MemorySegment seg, double x) {
        sdrplay_api_DevParamsT.ppm$VH.set(seg, x);
    }
    public static double ppm$get(MemorySegment seg, long index) {
        return (double)sdrplay_api_DevParamsT.ppm$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ppm$set(MemorySegment seg, long index, double x) {
        sdrplay_api_DevParamsT.ppm$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment fsFreq$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static MemorySegment syncUpdate$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment resetFlags$slice(MemorySegment seg) {
        return seg.asSlice(32, 3);
    }
    static final VarHandle mode$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("mode"));
    public static VarHandle mode$VH() {
        return sdrplay_api_DevParamsT.mode$VH;
    }
    public static int mode$get(MemorySegment seg) {
        return (int)sdrplay_api_DevParamsT.mode$VH.get(seg);
    }
    public static void mode$set( MemorySegment seg, int x) {
        sdrplay_api_DevParamsT.mode$VH.set(seg, x);
    }
    public static int mode$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_DevParamsT.mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mode$set(MemorySegment seg, long index, int x) {
        sdrplay_api_DevParamsT.mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle samplesPerPkt$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("samplesPerPkt"));
    public static VarHandle samplesPerPkt$VH() {
        return sdrplay_api_DevParamsT.samplesPerPkt$VH;
    }
    public static int samplesPerPkt$get(MemorySegment seg) {
        return (int)sdrplay_api_DevParamsT.samplesPerPkt$VH.get(seg);
    }
    public static void samplesPerPkt$set( MemorySegment seg, int x) {
        sdrplay_api_DevParamsT.samplesPerPkt$VH.set(seg, x);
    }
    public static int samplesPerPkt$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_DevParamsT.samplesPerPkt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void samplesPerPkt$set(MemorySegment seg, long index, int x) {
        sdrplay_api_DevParamsT.samplesPerPkt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rsp1aParams$slice(MemorySegment seg) {
        return seg.asSlice(44, 2);
    }
    public static MemorySegment rsp2Params$slice(MemorySegment seg) {
        return seg.asSlice(46, 1);
    }
    public static MemorySegment rspDuoParams$slice(MemorySegment seg) {
        return seg.asSlice(48, 4);
    }
    public static MemorySegment rspDxParams$slice(MemorySegment seg) {
        return seg.asSlice(52, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


