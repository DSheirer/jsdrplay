// Generated by jextract

package io.github.dsheirer.sdrplay.api.v3_08;

import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryHandles;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;

import java.lang.invoke.VarHandle;

import static jdk.incubator.foreign.CLinker.C_CHAR;
import static jdk.incubator.foreign.CLinker.C_DOUBLE;
import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_POINTER;

public class sdrplay_api_DeviceT
{

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(64, C_CHAR).withName("SerNo"),
        C_CHAR.withName("hwVer"),
        MemoryLayout.paddingLayout(24),
        C_INT.withName("tuner"),
        C_INT.withName("rspDuoMode"),
        C_CHAR.withName("valid"),
        MemoryLayout.paddingLayout(24),
        C_DOUBLE.withName("rspDuoSampleFreq"),
        C_POINTER.withName("dev")
    );
    public static MemoryLayout $LAYOUT() {
        return sdrplay_api_DeviceT.$struct$LAYOUT;
    }
    public static MemorySegment SerNo$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    static final VarHandle hwVer$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("hwVer"));
    public static VarHandle hwVer$VH() {
        return sdrplay_api_DeviceT.hwVer$VH;
    }
    public static byte hwVer$get(MemorySegment seg) {
        return (byte)sdrplay_api_DeviceT.hwVer$VH.get(seg);
    }
    public static void hwVer$set( MemorySegment seg, byte x) {
        sdrplay_api_DeviceT.hwVer$VH.set(seg, x);
    }
    public static byte hwVer$get(MemorySegment seg, long index) {
        return (byte)sdrplay_api_DeviceT.hwVer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwVer$set(MemorySegment seg, long index, byte x) {
        sdrplay_api_DeviceT.hwVer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tuner$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("tuner"));
    public static VarHandle tuner$VH() {
        return sdrplay_api_DeviceT.tuner$VH;
    }
    public static int tuner$get(MemorySegment seg) {
        return (int)sdrplay_api_DeviceT.tuner$VH.get(seg);
    }
    public static void tuner$set( MemorySegment seg, int x) {
        sdrplay_api_DeviceT.tuner$VH.set(seg, x);
    }
    public static int tuner$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_DeviceT.tuner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tuner$set(MemorySegment seg, long index, int x) {
        sdrplay_api_DeviceT.tuner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rspDuoMode$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("rspDuoMode"));
    public static VarHandle rspDuoMode$VH() {
        return sdrplay_api_DeviceT.rspDuoMode$VH;
    }
    public static int rspDuoMode$get(MemorySegment seg) {
        return (int)sdrplay_api_DeviceT.rspDuoMode$VH.get(seg);
    }
    public static void rspDuoMode$set( MemorySegment seg, int x) {
        sdrplay_api_DeviceT.rspDuoMode$VH.set(seg, x);
    }
    public static int rspDuoMode$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_DeviceT.rspDuoMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rspDuoMode$set(MemorySegment seg, long index, int x) {
        sdrplay_api_DeviceT.rspDuoMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle valid$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("valid"));
    public static VarHandle valid$VH() {
        return sdrplay_api_DeviceT.valid$VH;
    }
    public static byte valid$get(MemorySegment seg) {
        return (byte)sdrplay_api_DeviceT.valid$VH.get(seg);
    }
    public static void valid$set( MemorySegment seg, byte x) {
        sdrplay_api_DeviceT.valid$VH.set(seg, x);
    }
    public static byte valid$get(MemorySegment seg, long index) {
        return (byte)sdrplay_api_DeviceT.valid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void valid$set(MemorySegment seg, long index, byte x) {
        sdrplay_api_DeviceT.valid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rspDuoSampleFreq$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("rspDuoSampleFreq"));
    public static VarHandle rspDuoSampleFreq$VH() {
        return sdrplay_api_DeviceT.rspDuoSampleFreq$VH;
    }
    public static double rspDuoSampleFreq$get(MemorySegment seg) {
        return (double)sdrplay_api_DeviceT.rspDuoSampleFreq$VH.get(seg);
    }
    public static void rspDuoSampleFreq$set( MemorySegment seg, double x) {
        sdrplay_api_DeviceT.rspDuoSampleFreq$VH.set(seg, x);
    }
    public static double rspDuoSampleFreq$get(MemorySegment seg, long index) {
        return (double)sdrplay_api_DeviceT.rspDuoSampleFreq$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rspDuoSampleFreq$set(MemorySegment seg, long index, double x) {
        sdrplay_api_DeviceT.rspDuoSampleFreq$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dev$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dev")));
    public static VarHandle dev$VH() {
        return sdrplay_api_DeviceT.dev$VH;
    }
    public static MemoryAddress dev$get(MemorySegment seg) {
        return (MemoryAddress)sdrplay_api_DeviceT.dev$VH.get(seg);
    }
    public static void dev$set( MemorySegment seg, MemoryAddress x) {
        sdrplay_api_DeviceT.dev$VH.set(seg, x);
    }
    public static MemoryAddress dev$get(MemorySegment seg, long index) {
        return (MemoryAddress)sdrplay_api_DeviceT.dev$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dev$set(MemorySegment seg, long index, MemoryAddress x) {
        sdrplay_api_DeviceT.dev$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


