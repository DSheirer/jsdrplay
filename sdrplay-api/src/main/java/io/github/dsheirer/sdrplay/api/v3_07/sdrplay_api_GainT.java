// Generated by jextract

package io.github.dsheirer.sdrplay.api.v3_07;

import java.lang.invoke.VarHandle;

import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class sdrplay_api_GainT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("gRdB"),
        C_CHAR.withName("LNAstate"),
        C_CHAR.withName("syncUpdate"),
        MemoryLayout.paddingLayout(16),
        C_INT.withName("minGr"),
        MemoryLayout.structLayout(
            C_FLOAT.withName("curr"),
            C_FLOAT.withName("max"),
            C_FLOAT.withName("min")
        ).withName("gainVals")
    );
    public static MemoryLayout $LAYOUT() {
        return sdrplay_api_GainT.$struct$LAYOUT;
    }
    static final VarHandle gRdB$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("gRdB"));
    public static VarHandle gRdB$VH() {
        return sdrplay_api_GainT.gRdB$VH;
    }
    public static int gRdB$get(MemorySegment seg) {
        return (int)sdrplay_api_GainT.gRdB$VH.get(seg);
    }
    public static void gRdB$set( MemorySegment seg, int x) {
        sdrplay_api_GainT.gRdB$VH.set(seg, x);
    }
    public static int gRdB$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_GainT.gRdB$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gRdB$set(MemorySegment seg, long index, int x) {
        sdrplay_api_GainT.gRdB$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LNAstate$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LNAstate"));
    public static VarHandle LNAstate$VH() {
        return sdrplay_api_GainT.LNAstate$VH;
    }
    public static byte LNAstate$get(MemorySegment seg) {
        return (byte)sdrplay_api_GainT.LNAstate$VH.get(seg);
    }
    public static void LNAstate$set( MemorySegment seg, byte x) {
        sdrplay_api_GainT.LNAstate$VH.set(seg, x);
    }
    public static byte LNAstate$get(MemorySegment seg, long index) {
        return (byte)sdrplay_api_GainT.LNAstate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LNAstate$set(MemorySegment seg, long index, byte x) {
        sdrplay_api_GainT.LNAstate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle syncUpdate$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("syncUpdate"));
    public static VarHandle syncUpdate$VH() {
        return sdrplay_api_GainT.syncUpdate$VH;
    }
    public static byte syncUpdate$get(MemorySegment seg) {
        return (byte)sdrplay_api_GainT.syncUpdate$VH.get(seg);
    }
    public static void syncUpdate$set( MemorySegment seg, byte x) {
        sdrplay_api_GainT.syncUpdate$VH.set(seg, x);
    }
    public static byte syncUpdate$get(MemorySegment seg, long index) {
        return (byte)sdrplay_api_GainT.syncUpdate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void syncUpdate$set(MemorySegment seg, long index, byte x) {
        sdrplay_api_GainT.syncUpdate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle minGr$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("minGr"));
    public static VarHandle minGr$VH() {
        return sdrplay_api_GainT.minGr$VH;
    }
    public static int minGr$get(MemorySegment seg) {
        return (int)sdrplay_api_GainT.minGr$VH.get(seg);
    }
    public static void minGr$set( MemorySegment seg, int x) {
        sdrplay_api_GainT.minGr$VH.set(seg, x);
    }
    public static int minGr$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_GainT.minGr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void minGr$set(MemorySegment seg, long index, int x) {
        sdrplay_api_GainT.minGr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment gainVals$slice(MemorySegment seg) {
        return seg.asSlice(12, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


