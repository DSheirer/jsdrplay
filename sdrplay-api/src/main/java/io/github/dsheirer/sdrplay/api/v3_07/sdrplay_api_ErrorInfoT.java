// Generated by jextract

package io.github.dsheirer.sdrplay.api.v3_07;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sdrplay_api_ErrorInfoT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(256, Constants$root.C_CHAR$LAYOUT).withName("file"),
        MemoryLayout.sequenceLayout(256, Constants$root.C_CHAR$LAYOUT).withName("function"),
        Constants$root.C_INT$LAYOUT.withName("line"),
        MemoryLayout.sequenceLayout(1024, Constants$root.C_CHAR$LAYOUT).withName("message")
    );
    public static MemoryLayout $LAYOUT() {
        return sdrplay_api_ErrorInfoT.$struct$LAYOUT;
    }
    public static MemorySegment file$slice(MemorySegment seg) {
        return seg.asSlice(0, 256);
    }
    public static MemorySegment function$slice(MemorySegment seg) {
        return seg.asSlice(256, 256);
    }
    static final VarHandle line$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("line"));
    public static VarHandle line$VH() {
        return sdrplay_api_ErrorInfoT.line$VH;
    }
    public static int line$get(MemorySegment seg) {
        return (int)sdrplay_api_ErrorInfoT.line$VH.get(seg);
    }
    public static void line$set( MemorySegment seg, int x) {
        sdrplay_api_ErrorInfoT.line$VH.set(seg, x);
    }
    public static int line$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_ErrorInfoT.line$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void line$set(MemorySegment seg, long index, int x) {
        sdrplay_api_ErrorInfoT.line$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment message$slice(MemorySegment seg) {
        return seg.asSlice(516, 1024);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


