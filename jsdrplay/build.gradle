plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group 'io.github.dsheirer'
version '3.8.0-SNAPSHOT'

repositories {
    mavenCentral()
}

//Java 18 is required for this version of the Project Panama incubator feature
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(18)
    }
}

var incubatorArguments = ["--enable-native-access=ALL-UNNAMED,sdrplay.api,io.github.dsheirer.sdrplay",
                          "--add-modules", "jdk.incubator.foreign","-Djava.library.path=" + getJavaLibraryPath()]

tasks.withType(JavaExec) {
    jvmArgs += incubatorArguments
}
tasks.withType(Test) {
    jvmArgs += incubatorArguments
}

dependencies {
    implementation project(':sdrplay-api')
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha10'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.slf4j:slf4j-api:1.7.32'

    testImplementation 'com.github.wendykierp:JTransforms:3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()

    //Exclude all tests by default.  Comment out this line to run tests.
    exclude '**/*'
}

/**
 * Determine library path for the current operating system and architecture
 */
static String getJavaLibraryPath() {
    OperatingSystem os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem;

    if(os.isLinux() || os.isMacOsX()) {
        return "/usr/local/lib"
    }

    if(os.isWindows()) {
        if(System.getProperty("sun.arch.data.model").contentEquals("64")) {
            return "c:\\Program Files\\SDRplay\\API\\x64";
        }
        else {
            return "c:\\Program Files\\SDRplay\\API\\x86";
        }
    }

    return "";
}

/**
 * Publishes the library to GitHub repository
 * Note: username and GitHub personal access token (PAT) stored in user /.gradle/gradle.properties file.
 *
 * > gradle publish
 */
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/dsheirer/jsdrplay")
            credentials {
                username = project.findProperty("github.user") ?: System.getenv("USERNAME")
                password = project.findProperty("github.token") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
